<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" 
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:r="ddi:reusable:3_1"
	xmlns:xhtml="http://www.w3.org/1999/xhtml"
	xmlns:dce="ddi:dcelements:3_1"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:a="ddi:archive:3_1"
	xmlns:o="ddi:organizations:3_1"
	xmlns:g="ddi:group:3_1"
	xmlns:cm="ddi:comparative:3_1"
	xmlns:c="ddi:conceptualcomponent:3_1"
	xmlns:d="ddi:datacollection:3_1"
	xmlns:l="ddi:logicalproduct:3_1"
	xmlns:pd="ddi:physicaldataproduct:3_1"
	xmlns:ds="ddi:dataset:3_1"
	xmlns:pi="ddi:physicalinstance:3_1"
	xmlns:m1="ddi:physicaldataproduct/ncube/normal:3_1"
	xmlns:m2="ddi:physicaldataproduct/ncube/tabular:3_1"
	xmlns:m3="ddi:physicaldataproduct/ncube/inline:3_1"
	xmlns:s="ddi:studyunit:3_1"
	xmlns:pr="ddi:profile:3_1"
	xmlns:ddi="ddi:instance:3_1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="ddi:instance:3_1 http://www.ddialliance.org/sites/default/files/schema/ddi3.1/instance.xsd">
    <xsl:output method="text" media-type="text/x-gettext-translation" />
	<xsl:variable name="source">sv</xsl:variable>
	<xsl:variable name="target">en</xsl:variable>
	<xsl:preserve-space elements="d:Text"/>
	
	
	<xsl:template match="/ddi:DDIInstance">    
<xsl:text>
# Swedish translation of Svensk Nationell Datatjänst
# Generated by  
#
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"POT-Creation-Date: 2011-01-24 22:29+0100\n"
"PO-Revision-Date: 2011-01-24 22:29+0100\n"
"Last-Translator: NAME snd@snd.gu.se\n"
"Language-Team: Swedish snd@snd.gu.se\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n!=1);\n"


</xsl:text>	
		<xsl:apply-templates select="s:StudyUnit/d:DataCollection" />
	</xsl:template>
	
	
	<xsl:template match="d:DataCollection">
		<xsl:apply-templates select="d:QuestionScheme" />
	</xsl:template>
	

	<xsl:template match="d:QuestionScheme">	
		<xsl:for-each select="child::*">
			<xsl:apply-templates select="." />
		</xsl:for-each>
	</xsl:template>

<xsl:template match="d:QuestionSchemeName" />	

	
	<xsl:template match="d:QuestionItem">
<xsl:variable name="msgid" select="d:QuestionText[@xml:lang=$source]/d:LiteralText/d:Text" />
msgid "<xsl:call-template name="string-replace-all">
  <xsl:with-param name="text" select="$msgid"/>
  <xsl:with-param name="replace" select="'&#xa;'"/>
  <xsl:with-param name="by" select="'&quot;&#xa;&quot;'"/>
</xsl:call-template>"<xsl:variable name="msgstr" select="d:QuestionText[@xml:lang=$target]/d:LiteralText/d:Text" />
msgstr "<xsl:call-template name="string-replace-all">
  <xsl:with-param name="text" select="$msgstr"/>
  <xsl:with-param name="replace" select="'&#xa;'"/>
  <xsl:with-param name="by" select="'&quot;&#xa;&quot;'"/>
</xsl:call-template>"
<xsl:text>
</xsl:text>
	</xsl:template>
	<xsl:template match="d:MultipleQuestionItem">
<xsl:variable name="msgid" select="d:QuestionText[@xml:lang=$source]/d:LiteralText/d:Text" />
msgid "<xsl:call-template name="string-replace-all">
  <xsl:with-param name="text" select="$msgid"/>
  <xsl:with-param name="replace" select="'&#xa;'"/>
  <xsl:with-param name="by" select="'&quot;&#xa;&quot;'"/>
</xsl:call-template>"<xsl:variable name="msgstr" select="d:QuestionText[@xml:lang=$target]/d:LiteralText/d:Text" />
msgstr "<xsl:call-template name="string-replace-all">
  <xsl:with-param name="text" select="$msgstr"/>
  <xsl:with-param name="replace" select="'&#xa;'"/>
  <xsl:with-param name="by" select="'&quot;&#xa;&quot;'"/>
</xsl:call-template>"
		
		<xsl:apply-templates select="d:SubQuestions" />
	</xsl:template>	

	<xsl:template match="d:SubQuestions">
	    	<xsl:for-each select="child::*">
		    	<xsl:apply-templates select="." />
	    	</xsl:for-each>
	</xsl:template>		
<xsl:template name="string-replace-all">
  <xsl:param name="text"/>
  <xsl:param name="replace"/>
  <xsl:param name="by"/>
  <xsl:choose>
    <xsl:when test="contains($text,$replace)">
      <xsl:value-of select="substring-before($text,$replace)"/>
      <xsl:value-of select="$by"/>
      <xsl:call-template name="string-replace-all">
        <xsl:with-param name="text" select="substring-after($text,$replace)"/>
        <xsl:with-param name="replace" select="$replace"/>
        <xsl:with-param name="by" select="$by"/>
      </xsl:call-template>
    </xsl:when>
    <xsl:otherwise>
      <xsl:value-of select="$text"/>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>
</xsl:stylesheet>